# -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.63])
AC_INIT([makedoc], [0.1], [florian@linbit.com])
AM_INIT_AUTOMAKE

AC_CONFIG_MACRO_DIR([m4])

AC_CANONICAL_HOST

AC_LANG([C])

# local options
AC_ARG_ENABLE([pdf],
	[AS_HELP_STRING([--disable-pdf],
			[disable PDF output (default: enabled)])])
AM_CONDITIONAL(ENABLE_PDF, [ test x$enable_pdf != "xno" ])

AC_ARG_ENABLE([odf],
	[AS_HELP_STRING([--disable-odf],
			[disable OpenDocument Format output (default: enabled)])])
AM_CONDITIONAL(ENABLE_ODF, [ test x$enable_odf != "xno" ])

AC_ARG_ENABLE([asciidoc],
	[AS_HELP_STRING([--disable-asciidoc],
			[disable AsciiDoc input (default: enabled)])])
AM_CONDITIONAL(ENABLE_ASCIIDOC, [ test x$enable_asciidoc != "xno" ])

AC_ARG_ENABLE([mathml],
	[AS_HELP_STRING([--disable-mathml],
			[disable MathML support (default: enabled)])])
AM_CONDITIONAL(ENABLE_MATHML, [ test x$enable_mathml != "xno" ])

AC_ARG_ENABLE([profiling],
	[AS_HELP_STRING([--enable-profiling],
			[enable document profiling (default: disabled)])])
AM_CONDITIONAL(PROFILING, [ test x$enable_profiling = "xyes" ])

AC_ARG_WITH([stylesheets],
    [AS_HELP_STRING([--with-stylesheets=URL],
       [location of the DocBook XSL distribution])],
	[ STYLESHEET_PREFIX="$withval" ],
	[ STYLESHEET_PREFIX="http://docbook.sourceforge.net/release/xsl/current" ])
AC_SUBST(STYLESHEET_PREFIX)

AC_ARG_WITH([asciidoc-extension],
    [AS_HELP_STRING([--with-asciidoc-extension=NAME],
       [expect this extension for AsciiDoc filenames (default txt)])],
	[ ASCIIDOC_EXTENSION="$withval" ],
	[ ASCIIDOC_EXTENSION="txt" ])
AC_SUBST(ASCIIDOC_EXTENSION)

AC_ARG_WITH([ulink-target],
    [AS_HELP_STRING([--with-ulink-target=NAME],
       [target frame for external links in HTML output (default _blank)])],
	[ ULINK_TARGET="$withval" ],
	[ ULINK_TARGET="_blank" ])
AC_SUBST(ULINK_TARGET)

AC_ARG_WITH([pdf-formatter],
    [AS_HELP_STRING([--with-pdf-formatter=fop|xmlroff],
       [use this formatter for rendering FO to PDF (default: fop)])],
	[ PDF_FORMATTER="$withval" ],
	[ PDF_FORMATTER="fop" ])
AC_SUBST(PDF_FORMATTER)
AM_CONDITIONAL(USE_FOP, [test "x$enable_pdf" != "xno" && test "x$PDF_FORMATTER" = "xfop"])
AM_CONDITIONAL(USE_XMLROFF, [test "x$enable_pdf" != "xno" && test "x$PDF_FORMATTER" = "xxmlroff"])

AC_ARG_WITH([pdf-toc],
    [AS_HELP_STRING([--with-pdf-toc=STRING],
       [control ToC generation for PDF output (see http://docbook.sourceforge.net/release/xsl/current/doc/html/generate.toc.html for supported values)])],
	[ FO_TOC="$withval" ],
	[ FO_TOC="/set toc,title /book toc,title /article nop" ])
AC_SUBST(FO_TOC)

AC_ARG_WITH([pdf-body-font],
    [AS_HELP_STRING([--with-pdf-body-font=NAME],
       [body font for PDF output (default serif)])],
	[ FO_BODY_FONT_FAMILY="$withval" ],
	[ FO_BODY_FONT_FAMILY="serif" ])
AC_SUBST(FO_BODY_FONT_FAMILY)

AC_ARG_WITH([pdf-title-font],
    [AS_HELP_STRING([--with-pdf-title-font=NAME],
       [title font for PDF output (default: same as body font)])],
	[ FO_TITLE_FONT_FAMILY="$withval" ],
	[ FO_TITLE_FONT_FAMILY="$FO_BODY_FONT_FAMILY" ])
AC_SUBST(FO_TITLE_FONT_FAMILY)

AC_ARG_WITH([pdf-paper-size],
    [AS_HELP_STRING([--with-pdf-paper-size=SIZE],
       [set paper size for PDF output (default A4)])],
	[ PAPER_SIZE="$withval" ],
	[ PAPER_SIZE="A4" ])
AC_SUBST(PAPER_SIZE)

AC_ARG_WITH([fop-config],
    [AS_HELP_STRING([--with-fop-config=PATH],
       [location of the FOP configuration file (default fop-config.xml)])],
	[ FOP_CONFIG="$withval" ],
	[ FOP_CONFIG="fop-config.xml" ])
AC_SUBST(FOP_CONFIG)

AC_ARG_WITH([xmlroff-backend],
    [AS_HELP_STRING([--with-xmlroff-backend=gp|cairo],
       [use this xmlroff backend for rendering FO to PDF (default gp)])],
	[ XMLROFF_BACKEND="$withval" ],
	[ XMLROFF_BACKEND="gp" ])
AC_SUBST(XMLROFF_BACKEND)

AC_ARG_WITH([svg-rasterizer],
    [AS_HELP_STRING([--with-svg-rasterizer=inkscape|rsvg],
       [use this rasterizer for rendering SVG to PNG (default: inkscape)])],
	[ SVG_RASTERIZER="$withval" ],
	[ SVG_RASTERIZER="inkscape" ])
AC_SUBST(SVG_RASTERIZER)
AM_CONDITIONAL(USE_INKSCAPE, [test "x$SVG_RASTERIZER" = "xinkscape"])
AM_CONDITIONAL(USE_RSVG, [test "x$SVG_RASTERIZER" = "xrsvg"])

dnl DocBook document profiling options
AC_ARG_WITH([profile-arch],
    [AS_HELP_STRING([--with-profile-arch=NAME],
       [set architecture (for document profiling)])],
	[ XSLTPROC_PROFILING_OPTIONS="--stringparam profile.arch $withval" ])
AC_ARG_WITH([profile-condition],
    [AS_HELP_STRING([--with-profile-condition=NAME],
       [set condition (for document profiling)])],
	[ XSLTPROC_PROFILING_OPTIONS="$XSLTPROC_PROFILING_OPTIONS --stringparam profile.condition $withval" ])
AC_ARG_WITH([profile-userlevel],
    [AS_HELP_STRING([--with-profile-userlevel=NAME],
       [set user level (for document profiling)])],
	[ XSLTPROC_PROFILING_OPTIONS="$XSLTPROC_PROFILING_OPTIONS --stringparam profile.userlevel $withval" ])
AC_ARG_WITH([profile-vendor],
    [AS_HELP_STRING([--with-profile-vendor=NAME],
       [set vendor (for document profiling)])],
	[ XSLTPROC_PROFILING_OPTIONS="$XSLTPROC_PROFILING_OPTIONS --stringparam profile.vendor $withval" ])
AC_ARG_WITH([profile-status],
    [AS_HELP_STRING([--with-profile-status=NAME],
       [set document status (for document profiling, default current)])],
	[ XSLTPROC_PROFILING_OPTIONS="$XSLTPROC_PROFILING_OPTIONS --stringparam profile.status $withval" ],
	[ XSLTPROC_PROFILING_OPTIONS="$XSLTPROC_PROFILING_OPTIONS --stringparam profile.status current" ])

AC_SUBST(XSLTPROC_PROFILING_OPTIONS)


# Checks for programs.
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_SED

AC_CHECK_PROGS([XSLTPROC], [xsltproc])
if test -z $XSLTPROC; then
	AC_MSG_ERROR([xsltproc not found, cannot transform XML])
fi

dnl xmllint -- for XML validation
AC_CHECK_PROGS([XMLLINT], [xmllint])
if test -z $XMLLINT; then
	AC_MSG_WARN([xmllint not found, cannot validate XML])
fi
AM_CONDITIONAL([VALIDATE], [ test -n "$XMLLINT"])

dnl asciidoc -- for generating DocBook XML from asciidoc
if test "x$enable_asciidoc" != "xno"; then
   AC_CHECK_PROGS([ASCIIDOC], [asciidoc])
   if test -z $ASCIIDOC; then
	AC_MSG_WARN([asciidoc not found, cannot build from asciidoc sources])
   fi
fi
AM_CONDITIONAL([ASCIIDOC_SUPPORT], [ test -n "$ASCIIDOC" ])

if test "x$enable_pdf" != "xno"; then
   case "x$PDF_FORMATTER" in
     "xfop")
	AC_CHECK_PROGS([FOP], [fop])
	if test -z $FOP; then
	   AC_MSG_WARN([fop not found, cannot render PDF])
	fi
	AC_CHECK_PROGS([FOP_TTFREADER], [fop-ttfreader])
	if test -z $FOP_TTFREADER; then
	   AC_MSG_WARN([fop-ttfreader not found, cannot generate font metrics files from TTF])
	fi
	;;
     "xxmlroff")
	AC_CHECK_PROGS([XMLROFF], [xmlroff])
	if test -z $XMLROFF; then
	   AC_MSG_WARN([xmlroff not found, cannot render PDF])
	fi
   esac
fi
AM_CONDITIONAL([FONT_METRICS_TTF], [ test -n "$FOP_TTFREADER" ])
AM_CONDITIONAL([RENDER_PDF], [ test -n "$FOP" || test -n "$XMLROFF" ])
AM_CONDITIONAL([RENDER_PS], [ test -n "$FOP" || test -n "$XMLROFF" ])

dnl docbook2xml -- for creating OpenDocument Text from DocBook
if test "x$enable_odf" != "xno"; then
   AC_CHECK_PROGS([DOCBOOK2ODF], [docbook2odf])
   if test -z $DOCBOOK2ODF; then
      AC_MSG_WARN([docbook2odf not found, cannot render OpenDocument Text])
   fi
fi
AM_CONDITIONAL([RENDER_ODT], [ test -n "$DOCBOOK2ODF" ])

dnl Inkscape or rsvg -- for rasterizing PNGs from SVG
case "x$SVG_RASTERIZER" in
     "xinkscape")
	AC_CHECK_PROGS([INKSCAPE], [inkscape])
	if test -z $INKSCAPE; then
	   AC_MSG_WARN([inkscape not found, cannot rasterize SVG graphics])
	fi
	;;
     "xrsvg")
	AC_CHECK_PROGS([RSVG], [rsvg])
	if test -z $RSVG; then
	   AC_MSG_WARN([rsvg not found, cannot rasterize SVG graphics])
	fi
	;;
esac
AM_CONDITIONAL([RENDER_SVG], [ test -n "$INKSCAPE" || test -n "$RSVG" ])

dnl mathmlsvg -- for generating SVG from MML
if test "x$enable_mathml" != "xno"; then
   AC_CHECK_PROGS([MATHMLSVG], [mathmlsvg])
   if test -z $MATHMLSVG; then
      AC_MSG_WARN([mathmlsvg not found, cannot generate SVG graphics from MML])
   fi
fi
AM_CONDITIONAL([RENDER_MML], [ test -n "$MATHMLSVG" ])

# Checks for libraries.

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

## random vars

## Feature summary
AC_MSG_NOTICE()
AC_MSG_NOTICE([Feature summary])
AC_MSG_NOTICE([===============])
AM_COND_IF([RENDER_PDF],
           AC_MSG_NOTICE([PDF output is enabled]),
	   AC_MSG_NOTICE([PDF output is not enabled (install fop or xmlroff)]))
AM_COND_IF([RENDER_PS],
           AC_MSG_NOTICE([PostScript output is enabled]),
	   AC_MSG_NOTICE([PostScript output is not enabled (install fop or xmlroff)]))
AM_COND_IF([USE_FOP],
           AC_MSG_NOTICE([Using FOP for PDF/PS output]))
AM_COND_IF([USE_XMLROFF],
           AC_MSG_NOTICE([Using xmlroff for PDF/PS output]))
AM_COND_IF([ASCIIDOC_SUPPORT],
           AC_MSG_NOTICE([AsciiDoc input is enabled]),
	   AC_MSG_NOTICE([AsciiDoc input is not enabled (install asciidoc)]))
AM_COND_IF([RENDER_ODT],
           AC_MSG_NOTICE([OpenDocument Text output is enabled]),
	   AC_MSG_NOTICE([OpenDocument Text output is not enabled (install docbook2odf)]))
AM_COND_IF([RENDER_SVG],
           AC_MSG_NOTICE([SVG rasterization is enabled]),
	   AC_MSG_NOTICE([SVG rasterization is not enabled (install inkscape or rsvg)]))
AM_COND_IF([USE_INKSCAPE],
           AC_MSG_NOTICE([Using inkscape for SVG rasterization]))
AM_COND_IF([USE_RSVG],
           AC_MSG_NOTICE([Using rsvg for SVG rasterization]))
AM_COND_IF([RENDER_MML],
           AC_MSG_NOTICE([MathML rendering is enabled]),
	   AC_MSG_NOTICE([MathML rendering is not enabled (install mathmlsvg)]))
AC_MSG_NOTICE()


## do subst
